//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CharactersResponse: APIModel {

    public var attributionHTML: String?

    public var attributionText: String?

    public var code: Int?

    public var copyright: String?

    public var data: ResponseData?

    public var etag: String?

    public var status: String?

    public init(attributionHTML: String? = nil, attributionText: String? = nil, code: Int? = nil, copyright: String? = nil, data: ResponseData? = nil, etag: String? = nil, status: String? = nil) {
        self.attributionHTML = attributionHTML
        self.attributionText = attributionText
        self.code = code
        self.copyright = copyright
        self.data = data
        self.etag = etag
        self.status = status
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        attributionHTML = try container.decodeIfPresent("attributionHTML")
        attributionText = try container.decodeIfPresent("attributionText")
        code = try container.decodeIfPresent("code")
        copyright = try container.decodeIfPresent("copyright")
        data = try container.decodeIfPresent("data")
        etag = try container.decodeIfPresent("etag")
        status = try container.decodeIfPresent("status")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(attributionHTML, forKey: "attributionHTML")
        try container.encodeIfPresent(attributionText, forKey: "attributionText")
        try container.encodeIfPresent(code, forKey: "code")
        try container.encodeIfPresent(copyright, forKey: "copyright")
        try container.encodeIfPresent(data, forKey: "data")
        try container.encodeIfPresent(etag, forKey: "etag")
        try container.encodeIfPresent(status, forKey: "status")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CharactersResponse else { return false }
      guard self.attributionHTML == object.attributionHTML else { return false }
      guard self.attributionText == object.attributionText else { return false }
      guard self.code == object.code else { return false }
      guard self.copyright == object.copyright else { return false }
      guard self.data == object.data else { return false }
      guard self.etag == object.etag else { return false }
      guard self.status == object.status else { return false }
      return true
    }

    public static func == (lhs: CharactersResponse, rhs: CharactersResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
