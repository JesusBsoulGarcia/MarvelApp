//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CharData: APIModel {

    public var comics: CollectionElement?

    public var description: String?

    public var events: CollectionElement?

    public var id: Int?

    public var modified: String?

    public var name: String?

    public var resourceURI: String?

    public var series: CollectionElement?

    public var stories: CollectionElement?

    public var thumbnail: CharThumbnail?

    public var urls: [CharURL]?

    public init(comics: CollectionElement? = nil, description: String? = nil, events: CollectionElement? = nil, id: Int? = nil, modified: String? = nil, name: String? = nil, resourceURI: String? = nil, series: CollectionElement? = nil, stories: CollectionElement? = nil, thumbnail: CharThumbnail? = nil, urls: [CharURL]? = nil) {
        self.comics = comics
        self.description = description
        self.events = events
        self.id = id
        self.modified = modified
        self.name = name
        self.resourceURI = resourceURI
        self.series = series
        self.stories = stories
        self.thumbnail = thumbnail
        self.urls = urls
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        comics = try container.decodeIfPresent("comics")
        description = try container.decodeIfPresent("description")
        events = try container.decodeIfPresent("events")
        id = try container.decodeIfPresent("id")
        modified = try container.decodeIfPresent("modified")
        name = try container.decodeIfPresent("name")
        resourceURI = try container.decodeIfPresent("resourceURI")
        series = try container.decodeIfPresent("series")
        stories = try container.decodeIfPresent("stories")
        thumbnail = try container.decodeIfPresent("thumbnail")
        urls = try container.decodeArrayIfPresent("urls")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(comics, forKey: "comics")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(events, forKey: "events")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(modified, forKey: "modified")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(resourceURI, forKey: "resourceURI")
        try container.encodeIfPresent(series, forKey: "series")
        try container.encodeIfPresent(stories, forKey: "stories")
        try container.encodeIfPresent(thumbnail, forKey: "thumbnail")
        try container.encodeIfPresent(urls, forKey: "urls")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CharData else { return false }
      guard self.comics == object.comics else { return false }
      guard self.description == object.description else { return false }
      guard self.events == object.events else { return false }
      guard self.id == object.id else { return false }
      guard self.modified == object.modified else { return false }
      guard self.name == object.name else { return false }
      guard self.resourceURI == object.resourceURI else { return false }
      guard self.series == object.series else { return false }
      guard self.stories == object.stories else { return false }
      guard self.thumbnail == object.thumbnail else { return false }
      guard self.urls == object.urls else { return false }
      return true
    }

    public static func == (lhs: CharData, rhs: CharData) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
